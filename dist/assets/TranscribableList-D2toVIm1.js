import{_ as f,r as l,A as m,n as g,D as y,a as o,b as e,d as k,v as S,F as h,x as w,t as d,h as C,j as A,o as r}from"./index-DJHDVjkT.js";import{a as B}from"./axios-Bkw7EQY-.js";const T={class:"audio-list-screen"},x={class:"sort"},L={class:"audio-list"},D=["onClick"],F={key:0,class:"error-message"},M={__name:"TranscribableList",setup(N){const n=l([]),c=l("oldest"),a=l(""),v=m(),p=A();g(async()=>{await _(),await y()});async function _(){try{const s=await B.get("/transcriptions/transcribable/");n.value=s.data.chunks_for_transcription,v.setAudioList(n.value),a.value=""}catch(s){console.error("Error fetching audios:",s),a.value="Failed to load audio files. Please try again later."}}function b(s){console.log(s.toString()),p.push({name:"ChunkTranscribingScreen",params:{startIndex:s.toString()}})}return(s,t)=>(r(),o("div",T,[e("div",x,[t[2]||(t[2]=e("label",{for:"sort"},"Sort By:",-1)),k(e("select",{id:"sort","onUpdate:modelValue":t[0]||(t[0]=i=>c.value=i)},t[1]||(t[1]=[e("option",{value:"newest"},"Newest",-1),e("option",{value:"oldest"},"Oldest",-1)]),512),[[S,c.value]])]),e("div",L,[(r(!0),o(h,null,w(n.value,(i,u)=>(r(),o("div",{key:i.id,class:"audio-card"},[e("p",null,d("audio_"+u),1),e("button",{class:"review-btn",onClick:V=>b(u)}," Transcribe ",8,D)]))),128))]),a.value?(r(),o("div",F,d(a.value),1)):C("",!0)]))}},j=f(M,[["__scopeId","data-v-9bed16f1"]]);export{j as default};
